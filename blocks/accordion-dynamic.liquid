{% assign block_settings = block.settings %}
{% assign product_faq = product.metafields.custom.product_faq %}

{% if product_faq %}
  <div
    class="accordion accordion--{{ block.id }} accordion--{{ block_settings.icon }} border-style spacing-style{% if block_settings.inherit_color_scheme == false %} color-{{ block_settings.color_scheme }}{% endif %}{% if block_settings.dividers %} accordion--dividers{% endif %}"
    style="
      --summary-font-family: var(--font-{{ block_settings.type_preset }}--family);
       --summary-font-style: var(--font-{{ block_settings.type_preset }}--style);
       --summary-font-weight: var(--font-{{ block_settings.type_preset }}--weight);
       --summary-font-size: var(--font-{{ block_settings.type_preset }}--size);
       --summary-font-line-height: var(--font-{{ block_settings.type_preset }}--line-height);
       --summary-font-case: var(--font-{{ block_settings.type_preset }}--case);
      {% render 'spacing-style', settings: block_settings %}
      {% render 'border-override', settings: block_settings %}
    "
    {{ block.shopify_attributes }}
  >
    {% comment %} Iterate through FAQ pairs (q1/a1, q2/a2, etc.) to create accordion rows {% endcomment %}
    {% for i in (1..20) %}
      {% assign question_key = 'q' | append: i %}
      {% assign answer_key = 'a' | append: i %}
      {% assign question = product_faq.value[question_key] %}
      {% assign answer = product_faq.value[answer_key] %}

      {% if question != blank and answer != blank %}
        {% comment %} Render accordion row for each FAQ item {% endcomment %}
        {% render '_accordion-row-dynamic',
          question: question,
          answer: answer,
          open_first_item: block_settings.open_first_item,
          is_first: forloop.first,
          answer_type_preset: block_settings.answer_type_preset
        %}
      {% endif %}
    {% endfor %}
  </div>
{% endif %}

{% stylesheet %}
  .accordion {
    flex: 1;
    width: 100%;
  }

  .accordion--dividers accordion-custom:not(:first-child) .details {
    border-block-start: var(--style-border-width) solid var(--color-border);
  }

  /* When accordion borders are not set, show fallback borders */
  .accordion--dividers {
    /* stylelint-disable-next-line declaration-property-value-disallowed-list */
    --show-fallback-borders: 0;
  }

  .accordion--dividers:not([class*='color-'])[style*='--border-width: 0'],
  .accordion--dividers:not([class*='color-'])[style*='--border-style: none'] {
    --show-fallback-borders: 1;
  }

  .accordion--dividers accordion-custom:first-child .details {
    border-block-start: calc(var(--style-border-width) * var(--show-fallback-borders)) solid var(--color-border);
  }

  .accordion--dividers accordion-custom:last-child .details {
    border-block-end: calc(var(--style-border-width) * var(--show-fallback-borders)) solid var(--color-border);
  }

  .accordion--dividers .details-content {
    padding-block-end: var(--padding-sm);
  }

  .accordion--caret .icon-plus,
  .accordion--plus .icon-caret {
    display: none;
  }

  /* because we can't pass apply a specific class on a block based on its parent block setting */
  .accordion .details__header {
    font-family: var(--summary-font-family);
    font-style: var(--summary-font-style);
    font-weight: var(--summary-font-weight);
    font-size: var(--summary-font-size);
    line-height: var(--summary-font-line-height);
    text-transform: var(--summary-font-case);
    min-height: var(--minimum-touch-target);
  }
{% endstylesheet %}

{% schema %}
{
  "name": "Accordion (Dynamic)",
  "tag": null,
  "class": "accordion",
  "settings": [
    {
      "type": "paragraph",
      "content": "This accordion automatically displays FAQ content from the product's metafield 'custom.product_faq'. The metaobject should contain fields like q1, a1, q2, a2, etc."
    },
    {
      "type": "select",
      "id": "icon",
      "label": "Icon style",
      "options": [
        {
          "value": "caret",
          "label": "Caret"
        },
        {
          "value": "plus",
          "label": "Plus"
        }
      ],
      "default": "caret"
    },
    {
      "type": "checkbox",
      "id": "dividers",
      "label": "Show dividers",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "open_first_item",
      "label": "Open first item by default",
      "default": false
    },
    {
      "type": "select",
      "id": "type_preset",
      "label": "Question style",
      "options": [
        {
          "value": "paragraph",
          "label": "Paragraph"
        },
        {
          "value": "h1",
          "label": "Heading 1"
        },
        {
          "value": "h2",
          "label": "Heading 2"
        },
        {
          "value": "h3",
          "label": "Heading 3"
        },
        {
          "value": "h4",
          "label": "Heading 4"
        },
        {
          "value": "h5",
          "label": "Heading 5"
        },
        {
          "value": "h6",
          "label": "Heading 6"
        }
      ],
      "default": "h6",
      "info": "Edit presets in theme settings"
    },
    {
      "type": "select",
      "id": "answer_type_preset",
      "label": "Answer style",
      "options": [
        {
          "value": "paragraph",
          "label": "Paragraph"
        },
        {
          "value": "h1",
          "label": "Heading 1"
        },
        {
          "value": "h2",
          "label": "Heading 2"
        },
        {
          "value": "h3",
          "label": "Heading 3"
        },
        {
          "value": "h4",
          "label": "Heading 4"
        },
        {
          "value": "h5",
          "label": "Heading 5"
        },
        {
          "value": "h6",
          "label": "Heading 6"
        }
      ],
      "default": "paragraph",
      "info": "Edit presets in theme settings"
    },
    {
      "type": "checkbox",
      "id": "inherit_color_scheme",
      "label": "Inherit color scheme",
      "default": true
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "scheme-1",
      "visible_if": "{{ block.settings.inherit_color_scheme == false }}"
    },
    {
      "type": "header",
      "content": "Borders"
    },
    {
      "type": "select",
      "id": "border",
      "label": "Style",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "solid",
          "label": "Solid"
        }
      ],
      "default": "none"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Thickness",
      "default": 1,
      "visible_if": "{{ block.settings.border != 'none' }}"
    },
    {
      "type": "range",
      "id": "border_opacity",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Opacity",
      "default": 100,
      "visible_if": "{{ block.settings.border != 'none' }}"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Border radius",
      "min": 0,
      "max": 100,
      "step": 1,
      "default": 0
    },
    {
      "type": "header",
      "content": "Padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "Top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "Bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-inline-start",
      "label": "Left",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-inline-end",
      "label": "Right",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ]
}
{% endschema %}