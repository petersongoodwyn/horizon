{% liquid
  # Discover tab metafields from product
  assign discovered_tabs = blank
  assign tab_pairs = blank

  if product != blank
    # Create array to store discovered tab pairs
    assign tab_pairs = blank

    # Loop through numbers 1-20 to find tab pairs
    for i in (1..20)
      assign header_key = 'tab_' | append: i | append: '_heading'
      assign content_key = 'tab_' | append: i

      assign tab_header = product.metafields.custom[header_key]
      assign tab_content = product.metafields.custom[content_key]

      # Only include if both header and content exist and are not empty
      if tab_header != blank and tab_content != blank and tab_header.value != blank and tab_content.value != blank
        assign tab_pair = blank
        assign tab_pair = tab_pair | append: tab_header.value | append: '|||' | append: tab_content

        if tab_pairs == blank
          assign tab_pairs = tab_pair
        else
          assign tab_pairs = tab_pairs | append: '^^^' | append: tab_pair
        endif
      endif
    endfor

    # Convert to array
    if tab_pairs != blank
      assign discovered_tabs = tab_pairs | split: '^^^'
    endif
  endif

  # Set tab count and active index based on discovered tabs
  if discovered_tabs != blank
    assign tab_count = discovered_tabs.size
  else
    assign tab_count = section.blocks.size
  endif

  assign active_tab_index = 0

  for block in section.blocks
    if block.settings.active_by_default
      assign active_tab_index = forloop.index0
      break
    endif
  endfor
%}

<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<div
  class="spacing-style section section--{{ section.settings.section_width }} color-{{ section.settings.color_scheme }}"
  style="{% render 'spacing-padding', settings: section.settings %}"
>

  <tabbed-content
    class="tabbed-content tabbed-content--{{ section.settings.tab_orientation }}"
    initial-tab="{{ active_tab_index }}"
  >
    {% if tab_count > 0 %}
      <div
        role="tablist"
        class="tabbed-content__tablist"
        aria-label="{{ section.settings.section_title | default: 'Content tabs' }}"
        {% if section.settings.tab_orientation == 'vertical' %}
          aria-orientation="vertical"
        {% endif %}
      >
      </div>

      <div class="tabbed-content__panels">
      </div>

      <div class="tabbed-content__blocks">
        <!-- Dynamic tabs from metafields -->
        {% if discovered_tabs != blank %}
          {% for i in (1..20) %}
            {% assign header_key = 'tab_' | append: i | append: '_heading' %}
            {% assign content_key = 'tab_' | append: i %}
            {% assign tab_header = product.metafields.custom[header_key] %}
            {% assign tab_content = product.metafields.custom[content_key] %}

            {% if tab_header != blank and tab_content != blank and tab_header.value != blank and tab_content.value != blank %}
              {% # theme-check-disable UniqueStaticBlockId %}
                {% content_for 'block', id: 'static-tab', type: '_tab', tab_header: tab_header.value, tab_content: tab_content %}
              {% # theme-check-enable UniqueStaticBlockId %}
            {% endif %}
          {% endfor %}
        {% endif %}

        <!-- Manual/static tabs -->
        {% content_for 'blocks' %}
      </div>

      <!-- Mobile accordion interface -->
      <div class="tabbed-content__accordion">
        <!-- Dynamic accordion items from metafields -->
        {% if discovered_tabs != blank %}
          {% for i in (1..20) %}
            {% assign header_key = 'tab_' | append: i | append: '_heading' %}
            {% assign content_key = 'tab_' | append: i %}
            {% assign tab_header = product.metafields.custom[header_key] %}
            {% assign tab_content = product.metafields.custom[content_key] %}

            {% if tab_header != blank and tab_content != blank and tab_header.value != blank and tab_content.value != blank %}
              <details class="tabbed-content__accordion-item">
                <summary class="tabbed-content__accordion-summary">
                  {{ tab_header.value }}
                  <span class="tabbed-content__accordion-icon">
                    <svg width="12" height="8" viewBox="0 0 12 8" fill="none">
                      <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </span>
                </summary>
                <div class="tabbed-content__accordion-content">
                  {{ tab_content | metafield_tag }}
                </div>
              </details>
            {% endif %}
          {% endfor %}
        {% endif %}

        <!-- Manual/static accordion items -->
        {% for block in section.blocks %}
          {% if block.type == '_tab' %}
            <details class="tabbed-content__accordion-item">
              <summary class="tabbed-content__accordion-summary">
                {{ block.settings.title | default: 'Tab' }}
                <span class="tabbed-content__accordion-icon">
                  <svg width="12" height="8" viewBox="0 0 12 8" fill="none">
                    <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </span>
              </summary>
              <div class="tabbed-content__accordion-content">
                {{ block.settings.rich_text }}
              </div>
            </details>
          {% endif %}
        {% endfor %}
      </div>
    {% else %}
      <div class="tabbed-content__empty">
        <p>{{ 'sections.tabbed_content.empty' | t | default: 'Add tabs to display content.' }}</p>
      </div>
    {% endif %}
  </tabbed-content>
</div>

<script src="{{ 'tabbed-content.js' | asset_url }}" defer></script>

{% stylesheet %}
  .tabbed-content {
    width: 100%;
  }

  .tabbed-content__tab-block {
    display: none;
  }

  .tabbed-content__tablist {
    display: flex;
  }

  .tabbed-content--vertical .tabbed-content__tablist {
    flex-direction: column;
    border-bottom: none;
    border-right: 1px solid var(--color-border);
    margin-bottom: 0;
    margin-right: var(--padding-md);
    width: 200px;
  }

  .tabbed-content--vertical {
    display: flex;
  }

  .tabbed-content--vertical .tabbed-content__panels {
    flex: 1;
  }

  .tabbed-content__tab {
    background: none;
    border: none;
    cursor: pointer;
    font-family: var(--font-heading--family);
    font-size: var(--font-size--xl);
    padding: var(--padding-md) var(--padding-xl);
    color: var(--color-foreground);
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .tabbed-content--vertical .tabbed-content__tab {
    border-bottom: none;
    border-right: 2px solid transparent;
    text-align: left;
    width: 100%;
  }

  .tabbed-content__tab:hover {
    color: var(--color-link);
    background-color: var(--color-background-accent);
  }

  .tabbed-content__tab:focus-visible {
    outline: 2px solid var(--color-link);
    outline-offset: 2px;
  }

  .tabbed-content__tab--active {
    color: var(--color-link);
    border-bottom: 2px solid;
  }

  .tabbed-content--vertical .tabbed-content__tab--active {
    border-bottom-color: transparent;
    border-right-color: var(--color-link);
  }

  .tabbed-content__panels {
    position: relative;
  }

  .tabbed-content__panel {
    width: 100%;
    padding: var(--padding-xl);
  }

  .tabbed-content__panel:not(.tabbed-content__panel--active) {
    display: none;
  }

  .tabbed-content__panel-content {
    animation: fadeIn 0.3s ease-in-out;
  }

  .tabbed-content__empty {
    text-align: center;
    padding: var(--padding-lg);
    color: var(--color-foreground-secondary);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 749px) {
    /* Hide tabs interface on mobile */
    .tabbed-content__tablist,
    .tabbed-content__panels {
      display: none;
    }

    /* Show accordion interface on mobile */
    .tabbed-content__accordion {
      display: block;
    }

    .tabbed-content__tab-block {
      display: block !important;
      margin-bottom: var(--padding-sm);
    }

    /* Style accordion items like theme accordions */
    .tabbed-content__accordion-item {
      border: 1px solid var(--color-border);
      border-radius: var(--border-radius);
      margin-bottom: var(--padding-xs);
    }

    .tabbed-content__accordion-summary {
      padding: var(--padding-md) var(--padding-lg);
      background: var(--color-background);
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-family: var(--font-heading--family);
      font-size: var(--font-size--lg);
      font-weight: var(--font-weight--medium);
      border: none;
      width: 100%;
      text-align: left;
    }

    .tabbed-content__accordion-summary:hover {
      background: var(--color-background-accent);
    }

    .tabbed-content__accordion-content {
      padding: var(--padding-lg) var(--padding-md);
      border-top: 1px solid var(--color-border);
    }

    .tabbed-content__accordion-icon {
      transition: transform 0.2s ease;
    }

    .tabbed-content__accordion-item[open] .tabbed-content__accordion-icon {
      transform: rotate(180deg);
    }
  }

  @media (min-width: 750px) {
    /* Hide accordion interface on desktop */
    .tabbed-content__accordion {
      display: none;
    }

    .tabbed-content--vertical {
      flex-direction: column;
    }

    .tabbed-content--vertical .tabbed-content__tablist {
      flex-direction: row;
      border-right: none;
      border-bottom: 1px solid var(--color-border);
      margin-right: 0;
      margin-bottom: var(--padding-md);
      width: 100%;
      overflow-x: auto;
    }

    .tabbed-content--vertical .tabbed-content__tab {
      border-right: none;
      border-bottom: 2px solid transparent;
    }

    .tabbed-content--vertical .tabbed-content__tab--active {
      border-right-color: transparent;
      border-bottom-color: var(--color-link);
    }
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:names.tabbed_content",
  "class": "container-background",
  "blocks": [
    {
      "type": "_tab"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "t:settings.section_title",
      "default": "Content tabs"
    },
    {
      "type": "select",
      "id": "tab_orientation",
      "label": "t:settings.tab_orientation",
      "options": [
        {
          "value": "horizontal",
          "label": "t:options.horizontal"
        },
        {
          "value": "vertical",
          "label": "t:options.vertical"
        }
      ],
      "default": "horizontal"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "primary"
    },
    {
      "type": "header",
      "content": "t:content.size"
    },
    {
      "type": "select",
      "id": "section_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "page-width",
          "label": "t:options.page"
        },
        {
          "value": "full-width",
          "label": "t:options.full"
        }
      ],
      "default": "page-width"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "t:names.tabbed_content",
      "category": "t:categories.layout",
    }
  ]
}
{% endschema %}